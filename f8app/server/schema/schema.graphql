input AddToScheduleInput {
  sessionId: ID!
  clientMutationId: String!
}

type AddToSchedulePayload {
  session: Session
  clientMutationId: String!
}

type Config {
  wifiNetwork: String
  wifiPassword: String
}

type FAQ implements Node {
  id: ID!
  question: String
  answer: String
}

type Friend {
  id: ID
  name: String
  picture: String
  schedule: [Session]
}

type Map {
  id: ID!
  name: String
  map: String
}

type Mutation {
  addToSchedule(input: AddToScheduleInput!): AddToSchedulePayload
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  text: String
  url: String
  time: Float
}

type Page implements Node {
  id: ID!
  title: String
  url: String
  logo: String
}

type Query {
  node(id: ID!): Node
  viewer: User
  schedule: [Session]
}

type Session implements Node {
  id: ID!
  title: String
  slug: String
  day: Int
  startTime: Float
  endTime: Float
  location: Map
  description: String
  speakers: [Speaker]
  isAdded: Boolean
  friends: [Friend]
}

type Speaker implements Node {
  id: ID!
  name: String
  title: String
  picture: String
}

type User implements Node {
  id: ID!
  name: String
  friends: [Friend]
  notifications: [Notification]
  faqs: [FAQ]
  pages: [Page]
  config: Config
}
